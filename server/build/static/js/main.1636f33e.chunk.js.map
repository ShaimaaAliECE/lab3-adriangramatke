{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","name","setName","email","setEmail","appointmentDate","setAppointment","appointmentList","setAppointmentList","newAppointment","setNewAppointment","className","type","onChange","event","target","value","onClick","Axios","post","then","console","log","get","response","data","map","val","key","id","put","delete","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMA4GeA,MApGf,WAEE,MAAuBC,mBAAS,IAAhC,mBAAMC,EAAN,KAAYC,EAAZ,KACA,EAAwBF,mBAAS,IAAjC,mBAAMG,EAAN,KAAaC,EAAb,KACA,EAAwCJ,mBAAS,IAAjD,mBAAMK,EAAN,KAAuBC,EAAvB,KAEA,EAA6CN,mBAAS,IAAtD,mBAAMO,EAAN,KAAuBC,EAAvB,KAEA,EAA2CR,mBAAS,IAApD,mBAAMS,EAAN,KAAsBC,EAAtB,KAqCA,OACE,sBAAKC,UAAU,MAAf,UACA,sBAAKA,UAAU,cAAf,UACE,+CACA,uBACCC,KAAK,OACNC,SAAU,SAACC,GACTZ,EAAQY,EAAMC,OAAOC,UAGvB,mDACA,uBAAOJ,KAAK,OACZC,SAAU,SAACC,GACTV,EAASU,EAAMC,OAAOC,UAExB,sDACA,uBAAOJ,KAAK,OACVC,SAAU,SAACC,GACXR,EAAeQ,EAAMC,OAAOC,UAI9B,wBAAQC,QAzDW,WACrBC,IAAMC,KAAM,6BAA8B,CACxClB,KAAMA,EACNE,MAAOA,EACPE,gBAAiBA,IACjBe,MAAK,WACPC,QAAQC,IAAI,eAmDV,iCAGA,sBAAKX,UAAU,eAAf,UACE,wBAAQM,QAnDU,WACtBC,IAAMK,IAAI,oCAAoCH,MAAK,SAACI,GAClDhB,EAAmBgB,EAASC,UAiD1B,mCAEClB,EAAgBmB,KAAI,SAACC,EAAKC,GACzB,OACA,sBAAKjB,UAAU,cAAf,UACA,gCACA,wCAAWgB,EAAI1B,QACf,yCAAY0B,EAAIxB,SAChB,oDAAuBwB,EAAItB,sBAEzB,gCACF,uBAAOO,KAAM,OACVC,SAAU,SAACC,GAChBJ,EAAkBI,EAAMC,OAAOC,UAG7B,wBAAQC,QAAS,WA7DE,IAACY,IA6DuBF,EAAIE,GA5DtDX,IAAMY,IAAI,6BACV,CAACzB,gBAAiBI,EACfoB,GAAIA,IAAKT,MAAK,SAACI,GACbhB,EAAmBD,EAAgBmB,KAAI,SAACC,GACtC,OAAOA,EAAIE,KAAOA,EAAK,CAACA,GAAIF,EAAIE,GAAI5B,KAAM0B,EAAI1B,KAAME,MAAOwB,EAAIxB,MAAOE,gBAAiBI,GAAkBkB,UAwDzG,oBAEA,wBAAQV,QAAW,WArDD,IAACY,IAqDwBF,EAAIE,GApDrDX,IAAMa,OAAN,qCAA2CF,IAAMT,MAAK,SAACI,GACtDhB,EAAmBD,EAAgByB,QAAO,SAACL,GACxC,OAAOA,EAAIE,KAAOA,UAkDhB,oCCrFKI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1636f33e.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport Axios from 'axios'\n\n\n\n\n\nfunction App() {\n\n  const[name, setName] = useState(\"\");\n  const[email, setEmail]= useState(\"\");\n  const[appointmentDate, setAppointment]= useState(\"\");\n\n  const[appointmentList, setAppointmentList] = useState([]);\n\n  const[newAppointment, setNewAppointment] = useState(\"\");\n\n  const addAvailability= () => { //Adds availability for user, including name and e-mail\n    Axios.post ('http://localhost:80/create', {\n      name: name, \n      email: email, \n      appointmentDate: appointmentDate\n   }).then(() => {\n    console.log(\"success\");\n  });\n  };\n\n  const getAppointments = () =>{ //Shows all appointments to admin and guests\n    Axios.get(\"http://localhost:80/appointments\").then((response) =>{\n      setAppointmentList(response.data);\n    });\n  };\n\n  const updateAppointments = (id) => { //Update already added appointments\n   Axios.put(\"http://localhost:80/update\",\n   {appointmentDate: newAppointment, \n      id: id}).then((response) => {\n        setAppointmentList(appointmentList.map((val)=>{\n          return val.id === id ? {id: val.id, name: val.name, email: val.email, appointmentDate: newAppointment} : val\n       }))\n     });\n  };\n\n  const deleteAppointment = (id) =>{ //Delete appointments once clicked\n    Axios.delete(`http://localhost:80/delete/${id}`).then((response)=>{\n     setAppointmentList(appointmentList.filter((val)=> {\n        return val.id !== id;\n        })\n      );\n    });\n  };\n\n  return (\n    <div className=\"App\">\n    <div className=\"information\">\n      <label>Full Name:</label>\n      <input \n       type='text' \n      onChange={(event) => {\n        setName(event.target.value);\n      }}   \n      />\n      <label>Email Address:</label>\n      <input type='text'\n      onChange={(event) => {\n        setEmail(event.target.value);\n      }}   />\n      <label>Appointment Date:</label>\n      <input type='date'\n        onChange={(event) => {\n        setAppointment(event.target.value);\n        //Creating buttons that call functions\n      }}   \n      />\n      <button onClick= {addAvailability} >Add availability</button>\n      </div>\n\n      <div className=\"appointments\">\n        <button onClick ={getAppointments}>Show All Appointments</button>\n\n        {appointmentList.map((val, key) =>{\n          return (\n          <div className=\"appointment\"> \n          <div>\n          <h3>Name: {val.name}</h3> \n          <h3>Email: {val.email}</h3>\n          <h3>Appointment date: {val.appointmentDate}</h3> \n          </div>\n            <div> \n          <input type =\"date\"\n             onChange={(event) => {\n        setNewAppointment(event.target.value);\n      }}  \n          />\n          <button onClick={() => {updateAppointments(val.id)} }>Update</button>\n\n          <button onClick = {()=> {deleteAppointment(val.id)}}>Delete</button>\n          \n            </div>\n          </div>\n        );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}